  
name: .NET Core CI

on: 
  push:
  release:
    types:
      - created

jobs:
  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        dotnet: [ '5.0.x' ]
    name: Dotnet ${{ matrix.dotnet }} build on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Setup libc
        run: sudo apt-get install -y libc-dev libc++-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Test
        run: dotnet run --project SimpleGatheringTest/SimpleGatheringTest.csproj
      - name: Publish Windows
        if: matrix.os == 'windows-latest'
        run: dotnet publish SimpleGatheringTest/SimpleGatheringTest.csproj -c Debug -r win-x64 /p:PublishSingleFile=true /p:PublishTrimmed=true -o SimpleGatheringTest/bin/Debug/publish
      - name: Publish Linux
        if: matrix.os == 'ubuntu-latest'
        run: dotnet publish SimpleGatheringTest/SimpleGatheringTest.csproj -c Debug -r linux-x64 /p:PublishSingleFile=true /p:PublishTrimmed=true -o SimpleGatheringTest/bin/Debug/publish
      - name: Publish OSX
        if: matrix.os == 'macOS-latest'
        run: dotnet publish SimpleGatheringTest/SimpleGatheringTest.csproj -c Debug -r osx-x64 /p:PublishSingleFile=true /p:PublishTrimmed=true -o SimpleGatheringTest/bin/Debug/publish
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.0
        with:
          name: SimpleGatheringTest-${{ matrix.dotnet }}-${{ matrix.os }}
          path: SimpleGatheringTest/bin/Debug/publish
          if-no-files-found: error
  benchmark:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        dotnet: [ '5.0.x' ]
    name: Benchmarking
    steps:
      - uses: actions/checkout@v1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Setup libc
        run: sudo apt-get install -y libc-dev libc++-dev
      - run: dotnet run -c Release --project HardwareInformation.Benchmarks/HardwareInformation.Benchmarks.csproj
      - uses: actions/upload-artifact@v2.2.0
        with:
          name: BenchmarkLogs
          path: HardwareInformation.Benchmarks/bin/Release/net5.0/BenchmarkDotNet.Artifacts
  build:
    runs-on: ubuntu-latest
    continue-on-error: false
    name: Dotnet build and push
    strategy:
      matrix:
        dotnet: [ '5.0.x' ]
    steps:
      - uses: actions/checkout@v1
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - run: echo $(date "+%Y.%-m.%-d") > ./version
      - run: echo ${{ github.ref }} > ./version && sed -ie 's/refs\/tags\///' ./version
        if: startsWith(github.ref, 'refs/tags/')
      - name: Build
        run: dotnet pack -c Release --include-symbols -p:PackageVersion=$(cat ./version) --output nupkgs "./HardwareInformation.sln"
      - name: Nuget release
        if: startsWith(github.ref, 'refs/tags/')
        run: dotnet nuget push nupkgs/HardwareInformation.$(cat ./version).nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
        
      - name: GPR-Hack
        if: startsWith(github.ref, 'refs/tags/')
        run: |
           for f in ./nupkgs/*.nupkg
           do
             curl -vX PUT -u "L3tum:${{ secrets.GITHUB_TOKEN }}" -F package=@$f https://nuget.pkg.github.com/L3tum/
           done
      - uses: actions/setup-node@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/
      - name: Setup node package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          dotnet build -c Release HardwareInformation.Typings/HardwareInformation.Typings.csproj
          mkdir package
          cd HardwareInformation.Typings/Scripts
          cp -r ./* ../../package/
          cd ..
          cp package.template.json ../package/package.json
          cd ../package
          npm version --no-git-tag-version $(cat ../version)
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
        run: |
          cd package 
          npm publish --access public
        if: startsWith(github.ref, 'refs/tags/')
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://npm.pkg.github.com/
          scope: '@l3tum'
        if: startsWith(github.ref, 'refs/tags/')
      - name: Publish to GPR
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          cd package 
          npm publish --access public
        if: startsWith(github.ref, 'refs/tags/')
